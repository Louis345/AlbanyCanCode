var cov_zcmnakh3a=function(){var path="/Users/jamaltaylor/Documents/albanycancode/computation.js",hash="c2b474974079fc2b1832793c741668ce3399a76c",Function=function(){}.constructor,global=new Function('return this')(),gcv="__coverage__",coverageData={path:"/Users/jamaltaylor/Documents/albanycancode/computation.js",statementMap:{"0":{start:{line:1,column:12},end:{line:1,column:27}},"1":{start:{line:1,column:22},end:{line:1,column:27}},"2":{start:{line:2,column:20},end:{line:2,column:35}},"3":{start:{line:2,column:30},end:{line:2,column:35}},"4":{start:{line:3,column:17},end:{line:3,column:32}},"5":{start:{line:3,column:27},end:{line:3,column:32}},"6":{start:{line:4,column:17},end:{line:4,column:32}},"7":{start:{line:4,column:27},end:{line:4,column:32}},"8":{start:{line:6,column:0},end:{line:11,column:2}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:1,column:12},end:{line:1,column:13}},loc:{start:{line:1,column:22},end:{line:1,column:27}},line:1},"1":{name:"(anonymous_1)",decl:{start:{line:2,column:20},end:{line:2,column:21}},loc:{start:{line:2,column:30},end:{line:2,column:35}},line:2},"2":{name:"(anonymous_2)",decl:{start:{line:3,column:17},end:{line:3,column:18}},loc:{start:{line:3,column:27},end:{line:3,column:32}},line:3},"3":{name:"(anonymous_3)",decl:{start:{line:4,column:17},end:{line:4,column:18}},loc:{start:{line:4,column:27},end:{line:4,column:32}},line:4}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},f:{"0":0,"1":0,"2":0,"3":0},b:{},_coverageSchema:"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();cov_zcmnakh3a.s[0]++;const add=(a,b)=>{cov_zcmnakh3a.f[0]++;cov_zcmnakh3a.s[1]++;return a+b;};cov_zcmnakh3a.s[2]++;const subtraction=(a,b)=>{cov_zcmnakh3a.f[1]++;cov_zcmnakh3a.s[3]++;return a-b;};cov_zcmnakh3a.s[4]++;const division=(a,b)=>{cov_zcmnakh3a.f[2]++;cov_zcmnakh3a.s[5]++;return a/b;};cov_zcmnakh3a.s[6]++;const multiply=(a,b)=>{cov_zcmnakh3a.f[3]++;cov_zcmnakh3a.s[7]++;return a*b;};cov_zcmnakh3a.s[8]++;module.exports={add,subtraction,division,multiply};